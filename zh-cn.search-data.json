{"/about/":{"data":{"":"","关于我#关于我":"一个喜欢弄弄数码的信息安全本科生。","目前状态#目前状态":"【23/03/20 更】 最近忙，感觉明显比较暴躁了。班里还有同学周末夜不归宿找不到人，气死人还急死人。这周末补考高数，还有计算机二级同天考。一个上午直接坐牢。。。\n【24/03/10 更】 一个寒假的回家，算是充了个能，现在有些事我也试着给自己 anyway 的心态。不必要什么事情都揽着。Just Do the Right Things What I Think. （放洋屁）","联络#联络":"电邮：daaihang#qq.com","这个网站#这个网站":"网站域名（wdh.hk）来自香港域名註冊有限公司（Hong Kong Domain Name Registration Company Limited，HKDNR）。\n2023/03/20 — 2024/03/10 最初是2020年初疫情在家使用Wordpress建站。现在是大一寒假闲得无聊，弄了这个网站。使用Vuepress-Theme-Hope构建，部署在Github Page上。使用Netlify、Vercel和Cloudflare做CDN。\n之前已经弄过几次博客了，翻来覆去选了好多个博客系统。最初选择了Wordpress，当时是2020年初防疫在家，手头有一个树莓派，想搭一个小小的服务器。Wordpress用的还是5.x版本，许多界面不太友好。而且鬼佬的建站思维不太一样，踩了很多坑。\n后来选择用一些虚拟主机，有稳定的网络资源，云端部署也挺方便。而且找到了一家比较便宜的厂家。21年决定用腾讯云，新人优惠的70多块钱让我获得了1年的快乐。当时不仅仅尝试了Wordpress，还用过Ghost和Typecho一段时间。Ghost主打付费杂志一类，Typecho我也不想频繁上传（当时还没有Git和FTP的知识），便重新回到Wordpress的怀抱。\n最近服务器到期了，一直没有什么很大的项目需要服务器。便想着开始尝试静态网站。原本想使用Hexo或Hugo，但这两个的默认界面比较丑🤣，我就选择了比较好看的Vuepress，并且使用了Hope这个主题。Mr. Hope直接开发了这一个主题，加上了很多功能，还很好看。\n部署静态网页能学习npm和JS之类的知识，而且和源码打交道。算是一种进步🙊。\n2023/03/10 - NOW 现在是大二下了，开学第二周的周末。发现网站一年没有更新什么东西，而且 Vuepress Theme Hope 过于复杂 （可能是人老了想什么都简单点，够用就行） ，就换成了 Hugo + Github Pages 的方案，并且使用 Github Actions 部署，主打一个省事。把源码 git push 到私有仓库后直接触发在线编译，20 秒左右可以更新至公开仓库。\n另外比较难绷的是，上一版的《GZCTF部署笔记》莫名其妙被 Google 和 Bing 直接收录到相关搜索第一位。但是其中的部署文件的端口映射写错了，非常的尴尬 orz。是怎么发现的呢？是学弟搜到了我的文章，然后照着做了，发现搞不通，直接找我了🙈🙉🙊。"},"title":"关于"},"/blog/":{"data":{"":" 「博客」为非技术类文字记录。仅代表鄙人观点。 "},"title":"博客"},"/blog/check-in/":{"data":{"":"不懂从什么时候开始，大家被各种“打卡”包围了。各种 app 需要打卡，各种旅行地点需要打卡……好像是做任务，从某个npc手中接到了任务，然后拼命去完成了。\n打卡本身是没问题的，但是为什么大家会把原本只需要在工作、学习出现的方式，迁移到生活中，增加这种奇怪的生活仪式感？\n仔细看看手机中的app，游戏无一例外《LOL手游》《斗地主》《星穹铁道》，有的看似是每周任务，但体力一天就满了；外卖软件天天打卡领优惠券，缺只省得个5块3块，还是满30可用；健身软件和单词软件也在催着。\n健身和单词软件情有可原，但其他软件的打卡是否是多余了？游戏不是想玩就玩吗？何必凌晨四点服务器准备刷新了还得强行清醒上号领月卡奖励。支付宝种树领水果就像个浊水潭，你也不知道什么时候到底、到底需要花多少时间、到底浪费多少精力，就是为了戳屏幕上的树和最后的一箱果（说的是付出和回报不对等，当然有的人觉得值）。\n软件想赚存活率日活率，想方设法把我们困在某个软件的牢笼里。公司之间的争斗，个人的乐此不疲。\n不说了，要上课还得打卡呢，是吧，学习通？"},"title":"滴！打卡！"},"/blog/tech-and-manage/":{"data":{"":"上礼拜五（24/3/8）去开组会，方哥让我们讲一讲假期都做了啥。我还以为像是做报告呢，连 Keynote 都准备了，结果到那里大家人手一个手机，有的人连笔记本和笔都没有带。真是怪尴尬的。但是想着自己能和大家分享我的假期经历，也是不错的。有时候南北差异的碰撞也能带来惊喜。也可以和大家分享了自己假期的心态。\n现场分享我的假期晚会时候，我记录的一个想法被方哥看到了。现场太紧张，反而自己忘了问问。“技术固然可以吃饭，但最终是不是都得走上管理岗才能有‘出路’？”感觉到了 20 多岁，大学毕业也可能工作了，这个问题是时候需要一些解答。\n总感觉这几年就业形势不太妙，而且 35 岁被优化也不是不可能（毕竟公考都得 35 岁以下）。其次，大龄程序员和应届生工资倒转也是常事。也总感觉国内的技术人员没有太多话语权。\n老师的解答也很明了——35 岁以前，专心搞技术，毕竟那是对形势、技术最了解的时候。但是到了 40 岁，最好的办法还是转管理。已经没有那么多的时间和精力去开发、去研发了。而且年轻人不必太早接触某些管理方面的东西。\n这几天我尝试看看电影看看书补充点能量，但还是看了爆米花剧《年会不能停！》。里面有些场景，我作为学生竟然有感同身受之处。有些场合大家似乎都得话里有话，也不能把东西讲清楚。职场、官场大家都门清，算盘一个比一个打得大声······大多数人注定是没法独善其身的，甚至有的人连好好工作都做不到了。争争斗斗是这些场合的常态，但绝对不是正常的状态。\n《年会》里有一段场景，庄尼、Magic 和潘妮在水边被公司高管堵截，提出了更高的薪水和待遇，留住 3 个人，代价是裁撤整个标准件厂。弹幕里很多人“理想的观点”都是放弃工作坚持斗争，而“现实的观点”却都是“如果是我，我真有可能留下来升职加薪”“他给的实在是太多了”。往大的说，这是时代的洪流；往小的说，这是个人利益和集体利益的矛盾。看似我们有选择，但我们在家人、钱包面前，没有选择。\n（这一篇的思路很飘，但确实是真实感受了。）"},"title":"技术与管理"},"/docs/gzctf-build/":{"data":{"":" Github: GZTimeWalker/GZCTF\n部署方式：Docker-compose（GZCTF、数据库、题目容器均在同一Docker实例中）\n系统：Ubuntu20.04-Docker20（因此默认系统已经安装了Docker和Docker Compose）","命令行#命令行":"通过 Xshell 和 Xftp 连接服务器，上传 GZCTF 文件夹。开始部署。\ncd GZCTF docker-compose up -d 部署完成后，建议查看 log，看部署是否成功。主要是看 gzctf 容器是否连接上了数据库。\ndocker ps 查看容器 ID：\nubuntu@VM-16-8-ubuntu:~$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 5b9bc7a475h2 gztime/gzctf:latest \"dotnet CTFServer.dll\" 17 hours ago Up 17 hours 0.0.0.0:80-\u003e8080/tcp gzctf_gzctf_1 f00e8850dee4 postgres:alpine \"docker-entrypoint.s…\" 17 hours ago Up 17 hours 5432/tcp gzctf_db_1 看到 gzctf 的 ID 是 5b9bc7a475h2。使用 docker logs 5b9bc7a475h2 查看日志。看到连接上数据库的日志即可成功配置。","容器其他错误排查#容器其他错误排查":" 部署报错：\n不会两个文件内容改都不改吧？ 检查 pip 版本，检查 Docker 版本。 容器无法创建：数据库是否连上？看前面的配置和使用 docker logs xxx 命令查看日志。\n容器创建成功但无法打开网页：\n域名访问：服务商的域名配置是否正确？\n内存限制和存储限制是否太小？\n服务器的防火墙端口是否打开了？","将当前用户加入-docker-组#将当前用户加入 docker 组":"若出现下面的报错才需配置。\n[xxxx@xxxx ~]$ docker ps Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json\": dial unix /var/run/docker.sock: connect: permission denied 问题出在用户为访问 /var/run/docker.sock 的权限，只需给用户增加权限即可。命令行输入：\nsudo chown root:docker /var/run/docker.sock\t# 修改docker.sock权限为root:docker sudo groupadd docker # 添加docker用户组 sudo gpasswd -a $USER docker # 将当前用户添加至docker用户组 newgrp docker # 更新docker用户组 ","平台测试#平台测试":"登录域名或 IP（域名需要在域名服务商配置）。用 Admin 和前面设置的密码登录。（中间就自己添加比赛什么的）然后添加需要容器的题目，并测试几个 Web 容器。\n可以测试的 Docker Hub 镜像如下。这些镜像本身部署是没有问题的。若出现错误就是平台配置问题了。服务端口均为 80。\nvaalacat/push_f12 glzjin/hctf_2018_warmup ctftraining/hbctf_2017_dameixian ctftraining/qwb_2019_smarthacker ctftraining/buuctf_2018_online_tool ctftraining/qwb_2019_upload ctftraining/qwb_2019_supersqli 需要注意的是，部分镜像需要内存和存储较多，可能出现创建容器成功但无法打开网页的情况。","配置文件#配置文件":"新建两个文件，位于同一个文件夹。这里的文件夹名称为 GZCTF，文件为 appsettings.json 和 docker-compose.yml 。\nappsettings.json 文件内写入：\n{ \"AllowedHosts\": \"*\", \"ConnectionStrings\": { \"Database\": \"Host=db:5432;Database=gzctf;Username=postgres;Password=\u003cString1\u003e\" //\u003cString1\u003e换成数据库密码，随机密码且长度足够 }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\" } }, //邮箱配置 \"EmailConfig\": { \"SendMailAddress\": \"Admin@xxx.com\",\t// 填入邮箱 \"UserName\": \"ctf_noreply\",\t// 发件人名称 \"Password\": \"******\", // 邮箱密码，部分服务商需要填入授权码 \"Smtp\": { \"Host\": \"smtp.163.com\",\t// 此处为163邮箱服务器，具体自定 \"Port\": 465 } }, \"XorKey\": \"\u003cString2\u003e\",\t// 自定XorKey \"ContainerProvider\": { \"Type\": \"Docker\", \"PublicEntry\": \"xx.xx.xx.xx\",\t// 域名或IP配置，用于容器生成,域名不带http/https \"DockerConfig\": { \"SwarmMode\": false, \"Uri\": \"\"\t// 本地配置Docker因此此处置空 } }, \"RequestLogging\": false, \"DisableRateLimit\": false, \"RegistryConfig\": { \"UserName\": \"\", \"Password\": \"\", \"ServerAddress\": \"\" }, //谷歌验证码配置 \"GoogleRecaptcha\": { \"VerifyAPIAddress\": \"https://www.recaptcha.net/recaptcha/api/siteverify\", \"Sitekey\": \"\", \"Secretkey\": \"\", \"RecaptchaThreshold\": \"0.5\" } } docker-compose.yml 写入：\nversion: '3.0' services: gzctf: image: gztime/gzctf:latest restart: always environment: - \"GZCTF_ADMIN_PASSWORD=\u003cString3\u003e\" # \u003cString3\u003e换成管理员账户密码，账号为Admin ports: - \"80:8080\" # 对外端口号，前为外部端口。 networks: default: volumes: - \"./data/files:/app/uploads\" - \"./appsettings.json:/app/appsettings.json:ro\" - \"./logs:/app/log\" - \"./data/keys:/root/.aspnet/DataProtection-Keys\" # - \"./k8sconfig.yaml:/app/k8sconfig.yaml:ro\" - \"/var/run/docker.sock:/var/run/docker.sock\" depends_on: - db db: image: postgres:alpine restart: always environment: - \"POSTGRES_PASSWORD=\u003cString1\u003e\" # 数据库密码，务必要和appsettings.json中的配置一致 networks: default: volumes: - \"./data/db:/var/lib/postgresql/data\" networks: default: driver: bridge ipam: config: - subnet: 192.168.12.0/24 "},"title":"GZCTF 搭建部署笔记（Docker）"},"/docs/mi4c-drcom/":{"data":{"":" ℹ️ 使用广东工业大学的OpenWrt刷机包。亲测可以直接在西安邮电大学长安校区使用（联通校园网），并解除联通校园网的设备使用数量限制。适合有多台设备的同学使用。\n参考文章：\n⭐在Dr.COM下使用路由器上校园网WIFI（若配置别的路由器则可以看这个Github项目）\n开启telnet刷小米路由器\n⚠️ 本教程仅供学习，请在成功刷入OpenWrt后正确使用系统，并在学习后24小时内删除相关固件和（或）软件包。 ","breed的刷入与配置#Breed的刷入与配置":"刷入Breed 在MobaXterm的telnet终端窗口键入命令，不出现错误提示信息就是成功了。\nmtd write /tmp/breed.bin Bootloader 进入Breed ⚠️ 以下步骤务必正确进行。 拔掉路由器4C电源，用牙签按住路由器4C的reset按钮不松开，插上电源，路由器4C的灯会闪几下，这需要几秒钟，然后松开reset，路由器已进入Breed。\n用网线连接电脑和路由器4C的Lan口（局域网网口，而不是接入外部网络的口），在电脑上用浏览器打开192.168.1.1就能看到Breed的网页界面了。\n第一次进入Breed，要在Breed里面把前面备份的eeprom.bin文件刷回去。进Breed-固件更新，里面可以刷eeprom。","openwrt配置#OpenWrt配置":"端口校园网配置 选择左侧网络-接口，选择WAN6-编辑。\n协议选择PPPoE，然后点击出现的 Switch Protocol（切换协议）按钮；PAP/CHAP用户名为学号+@unicom，例如23338080@unicom；密码为校园网登陆密码。随后点击保存，然后点击保存并应用。\n⚠️ 另一个端口WAN不要进行相同设置，只设置WAN6即可。因为不能多个“设备”登录同一个校园网账号。 无线网络设置 选择左侧网络-无线。如果提示Disabled（已禁用）就点击Enable（启用）。可能只有一个2.4G的，也可能有一个2.4G的、一个5G的。点2.4G或5G的编辑按钮。ESSID填你想要的WiFi名称。\n点击Wireless Security（无线安全）。Encryption（加密）改选为WPA2-PSK；Key（密码）填你想要的WiFi密码；最后点击保存并应用。\n配置Dr.com插件 按下图进行配置。\n点击左侧网络-接口，查看WAN6的MAC地址并复制，修改此处Dr.com的MAC拨号的地址。\n注意，在接口名称中，不一定选择的是eth0.2，而是选择与WAN6对应的接口名称，有可能是eth1，下图提示有误。\n在配置保存后，路由器会自动连接。耐心等待后，若可以在页面中看到接发数据，获取到了IP地址，即配置成功。\n如果发现路由器一直不能上网，则说明:\nwan中，学号密码输入错误(可能性30%)； drcom插件中，学号密码输入错误(可能性30%)； 路由器的wan没有与校园网端口连接(可能性20%)； 网线断了，或者路由器坏了(可能性15%)； 压根没开通校园网(可能性4.9%)； 端口被学校网络中心拉黑了(极少出现0.1%)。 （可选操作）配置防检测 具体看这里：shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt (github.com)","使用ftp上传breed并下载eeprom备份文件#使用FTP上传Breed，并下载eeprom备份文件":"在Windows上打开资源管理器，在地址栏输入ftp://192.168.31.1然后回车，路由器4C的文件系统就出现了。\nℹ️ FTP服务使用的是游客匿名登录，无需账户和密码，可以直接回车登录。不要使用root账户登录。 把之前下载的breed-mt7688-reset38.bin改名为breed.bin，然后复制到/tmp目录内备用。\n另外把/tmp目录下的eeprom.bin文件下载到本地，做好备份。","刷入openwrt固件#刷入OpenWrt固件":"现在正式开始刷入OpenWrt固件，依次点击固件更新-勾选固件-点击选择文件，选择我们刚刚下载的Mi4C.bin，然后耐心等待固件刷入完成。\n安装完成后会自动重启，这时可以不断刷新浏览器，直到管理界面显示出来，如果没有显示，建议稍后使用192.168.1.1访问管理页面。\nℹ️ 账号:root\n密码:默认没有密码或者默认密码为password","前置步骤进入系统配置密码#前置步骤：进入系统配置密码":"在校内无网情况下，路由器需要先配置WIFI密码才能进行后续步骤。否则无法用命令行登录小米路由器。\n路由器插入电源，手机或电脑搜索WIFI，找到名为Xiaomi_****的无密码WIFI，直接连接。\n打开路由器默认配置界面（IP地址：192.168.31.1），跳过拨号配置界面，直接设置WIFI密码（管理员密码默认于此相同，刷入Breed后该密码会被覆盖）。随后进入路由器主页，即可关闭网页。","在小米路由器4c上开启telnet和ftp#在小米路由器4C上开启telnet和FTP":"解压R3GV2 patches包，双击运行0.start_main.bat批处理文件，期间需要在cmd窗口输入你的路由器4C的管理员密码。结束后，路由器4C就可以用telnet远程登录和使用FTP上传下载文件了。\nℹ️ 原理大概是运用程序漏洞提权，获取root权限并开启FTP服务。 ","大功告成#大功告成":"🎉至此已经可以上网了！开始享受无线设备数量限制的快乐吧！\n本教程大体还是参照Github项目Drcom-GDUT-HC5661A-OpenWrt进行配置。其他路由器可参照该项目。\n⚠️ 本教程仅供学习，请在成功刷入OpenWrt后正确使用系统，并在学习后24小时内删除相关固件和（或）软件包。 ","文件下载#文件下载":" MobaXterm 官网（MobaXterm Xserver），建议下载便携版本（Portable edition）。 R3GV2 patches Onedrive链接。 Breed（小米4C）下载链接，其他路由器查看这里的表格。 OpenWrt（小米4C）Github下载链接（内置了Dr.com插件及防检测插件）。 （可选）自行安装OpenWrt其他软件包。 ","步骤提要#步骤提要":" 初始化，简单进入系统。\n开启telnet和ftp，刷Breed，防止变砖。\n刷OpenWrt，配置网络和Dr.com。","用telnet登录到小米路由器4c#用telnet登录到小米路由器4C":"在MobaXterm里新建一个session，类型telnet，主机地址为192.168.31.1，用户为root，密码空，就能登录路由器4C了。\n看到命令提示符是root@XiaoQiang即可完成登录。这其实就是Linux下的Shell。\n生成eeprom备份文件 在MobaXterm的telnet终端窗口键入以下命令并回车。\ndd if=/dev/mtd3 of=/tmp/eeprom.bin 理论上讲，用dd命令可以备份路由器4C的所有分区。最好把所有分区都备份。"},"title":"使用小米路由器 4C 登录西邮联通校园网"},"/docs/netlity/":{"data":{"":"使用Github Page构建静态网页可以大大降低网页部署成本。虽然Github设有CDN加速节点，但在大陆仍然加载较慢。可以使用Netlity加速访问，提升Github Page的国内使用体验。\n加速后本网站实测结果（用了很多网站测试，测速结果基本一致）：\nℹ️ 更多测速结果\nℹ️ 在构建过程中，本网站使用Cloudflare解析域名并加速，使用Netlity再次加速Github Page。因此本网站（旧版本，版本更新见关于）是Cloudflare、Netlity和Github Page三方加速的结果。但在我部署前后的加速仍然比较明显。 ","最后#最后":" ℹ️ 推荐网站：PageSpeed Insights 这个网站为谷歌旗下网站分析的网站，可以分析网站的优缺点，提出优化建议。例如采用新一代格式提供图片、适当调整图片大小、移除阻塞渲染的资源。这些建议可以帮助提高网页加载速度。同时还给出无障碍设计建议、安全建议和SEO优化建议，谷歌还是很给力的😘。\n在国内使用Github Page还是比较累人的。网络环境让我们没法好好使用这个功能。但花些时间捣鼓捣鼓就可以有比较好的体验。关键还不用花钱。虽然Page服务没法弄数据库，但对个人博客来说已经够用了。","添加自定义域名#添加自定义域名":"完成后在Domains选项卡中点击Add custom domain添加自定义域名。并在域名解析服务商填写解析。\n添加后后添加两个域名，需要分别设置。点击Check DNS configuration选项，查看需要CNAME的域名。\n复制框内的二级域名或IP地址，在域名解析商设置解析。\n例如，我在Cloudflare解析域名，那我就在此处添加记录，解析上面两个域名。注意需要分开解析example.com和www.example.com域名，解析类型为CNAME。","绑定仓库#绑定仓库":"前面的基础信息自行选择，并起一个用户名。只需要填框内两个项目，其他选项可不填写。\n选择Import from Git，以导入Github上的仓库。\n登入Github账号后，选择需要构建的仓库\u003cusername\u003e.github.io。\n选择了需要的分支后点击Deploy site。","设置https#设置HTTPS":"完成解析后在下方选项启用HTTPS，安全访问网站。（此时截图还没验证完成，验证成功后可以启用。）"},"title":"使用Netlity加速Github Page"},"/docs/ubuntu-mongodb/":{"data":{"":"","使用mongodb-70数据库#使用MongoDB 7.0数据库":"要连接到 MongoDB shell，请使用：mongosh命令。\n示例输出：\nCurrent Mongosh Log ID:\t64eb1de75716266ec1174a00 Connecting to:\tmongodb://127.0.0.1:27017/?directConnection=true\u0026serverSelectionTimeoutMS=2000\u0026appName=mongosh+1.10.6 Using MongoDB:\t7.0.0 Using Mongosh:\t1.10.6 For mongosh info see: https://docs.mongodb.com/mongodb-shell/ To help improve our products, anonymous usage data is collected and sent to MongoDB periodically (https://www.mongodb.com/legal/privacy-policy). You can opt-out by running the disableTelemetry() command. test\u003e 在 MongoDB 上创建用户 将通过创建一个名为 testuser 的示例用户来进行测试。我们还将为用户分配管理员角色：\nuse admin db.createUser( { user: \"testuser\", pwd: passwordPrompt(), // or cleartext password roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" }, \"readWriteAnyDatabase\" ] } ) 为用户设置所需的密码，然后使用exit命令退出。\n我们将通过使用用户连接来测试一切是否正常：\nmongosh -u testuser -p --authenticationDatabase admin 创建数据库和集合 要在 MongoDB 上创建数据库，只需切换到一个不存在的数据库，如 testdb 所示：\nuse testdb 输出：switched to db testdb。\n现在可以在数据库中创建集合：\ndb.employeedetails.insertOne( {F_Name: \"John\", L_NAME: \"Doe\", ID_NO: \"23245\", AGE: \"25\", TEL: \"63365467666\" } ) 查看创建的集合 show collections ","安装mongodb-70包#安装MongoDB 7.0包":"添加存储库后，使用以下命令更新包索引并安装 MongoDB 7.0：\nsudo apt update \u0026\u0026 sudo apt install mongodb-org -y 启动并启用服务：\nsudo systemctl enable --now mongod 验证服务是否启动：\nsystemctl status mongod 验证安装的 MongoDB 版本：\nmongod --version ","添加mongodb-70存储库#添加MongoDB 7.0存储库":"更新 APT 包索引：\nsudo apt update -y 安装所有必需的软件包：\nsudo apt install wget curl gnupg2 software-properties-common apt-transport-https ca-certificates lsb-release vim 接下来，导入 MongoDB 7.0 存储库的 GPG 密钥：\ncurl -fsSL https://pgp.mongodb.com/server-7.0.asc |sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/mongodb-server-7.0.gpg 在 Ubuntu 22.04 上添加 MongoDB 7.0 的存储库：\necho \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list ","配置mongodb-70#配置MongoDB 7.0":"MongoDB 将其配置文件存储在 /etc/mongod.conf 中。在该文件中，可以对 MongoDB 进行所有所需的配置，包括数据库路径、日志目录等。\n以下是我们可以为 MongoDB 7.0 进行的一些设置。都需要打开文件进行编辑：\nsudo vim /etc/mongod.conf 启用密码验证 要在 MongoDB 7.0 上启用密码身份验证，请取消配置中以下行的注释：\nsecurity: authorization: enabled\n启用远程访问 为了允许远程访问数据库，我们需要将其设置为绑定到所有接口，而不仅仅是本地主机。为此，请进行以下修改：\n# network interfaces net: port: 27017 bindIp: 0.0.0.0 # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting. 设置完成后，保存配置并重新启动服务：\nsudo systemctl restart mongod 如果启用了服务器的防火墙，请允许该服务通过。云服务器厂商通常关闭服务器内部的防火墙，并由云服务器控制台统一管理。\nsudo ufw allow 27017 "},"title":"Ubuntu 20.04 安装 MongoDB 7.0"}}